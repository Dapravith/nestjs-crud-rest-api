{
    "sourceFile": "src/book/book.controller.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1707879695828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1707881565206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n+import { PassportModule } from '@nestjs/passport';\n import { Test, TestingModule } from '@nestjs/testing';\n+import { User } from '../auth/schemas/user.schema';\n import { BookController } from './book.controller';\n import { BookService } from './book.service';\n-import { Category } from './schemas/book.schema';\n-import { PassportModule } from '@nestjs/passport';\n import { CreateBookDto } from './dto/create-book.dto';\n-import { User } from '../auth/schemas/user.schema';\n import { UpdateBookDto } from './dto/update-book.dto';\n+import { Category } from './schemas/book.schema';\n \n describe('BookController', () => {\n   let bookService: BookService;\n   let bookController: BookController;\n"
                }
            ],
            "date": 1707879695828,
            "name": "Commit-0",
            "content": "import { Test, TestingModule } from '@nestjs/testing';\nimport { BookController } from './book.controller';\nimport { BookService } from './book.service';\nimport { Category } from './schemas/book.schema';\nimport { PassportModule } from '@nestjs/passport';\nimport { CreateBookDto } from './dto/create-book.dto';\nimport { User } from '../auth/schemas/user.schema';\nimport { UpdateBookDto } from './dto/update-book.dto';\n\ndescribe('BookController', () => {\n  let bookService: BookService;\n  let bookController: BookController;\n\n  const mockBook = {\n    _id: '61c0ccf11d7bf83d153d7c06',\n    user: '61c0ccf11d7bf83d153d7c06',\n    title: 'New Book',\n    description: 'Book Description',\n    author: 'Author',\n    price: 100,\n    category: Category.FANTASY,\n  };\n\n  const mockUser = {\n    _id: '61c0ccf11d7bf83d153d7c06',\n    name: 'Ghulam',\n    email: 'ghulam1@gmail.com',\n  };\n\n  const mockBookService = {\n    findAll: jest.fn().mockResolvedValueOnce([mockBook]),\n    create: jest.fn(),\n    findById: jest.fn().mockResolvedValueOnce(mockBook),\n    updateById: jest.fn(),\n    deleteById: jest.fn().mockResolvedValueOnce({ deleted: true }),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [PassportModule.register({ defaultStrategy: 'jwt' })],\n      controllers: [BookController],\n      providers: [\n        {\n          provide: BookService,\n          useValue: mockBookService,\n        },\n      ],\n    }).compile();\n\n    bookService = module.get<BookService>(BookService);\n    bookController = module.get<BookController>(BookController);\n  });\n\n  it('should be defined', () => {\n    expect(bookController).toBeDefined();\n  });\n\n  describe('getAllBooks', () => {\n    it('should get all books', async () => {\n      const result = await bookController.getAllBooks({\n        page: '1',\n        keyword: 'test',\n      });\n\n      expect(bookService.findAll).toHaveBeenCalled();\n      expect(result).toEqual([mockBook]);\n    });\n  });\n\n  describe('createBook', () => {\n    it('should create a new book', async () => {\n      const newBook = {\n        title: 'New Book',\n        description: 'Book Description',\n        author: 'Author',\n        price: 100,\n        category: Category.FANTASY,\n      };\n\n      mockBookService.create = jest.fn().mockResolvedValueOnce(mockBook);\n\n      const result = await bookController.createBook(\n        newBook as CreateBookDto,\n        mockUser as User,\n      );\n\n      expect(bookService.create).toHaveBeenCalled();\n      expect(result).toEqual(mockBook);\n    });\n  });\n\n  describe('getBookById', () => {\n    it('should get a book by ID', async () => {\n      const result = await bookController.getBook(mockBook._id);\n\n      expect(bookService.findById).toHaveBeenCalled();\n      expect(result).toEqual(mockBook);\n    });\n  });\n\n  describe('updateBook', () => {\n    it('should update book by its ID', async () => {\n      const updatedBook = { ...mockBook, title: 'Updated name' };\n      const book = { title: 'Updated name' };\n\n      mockBookService.updateById = jest.fn().mockResolvedValueOnce(updatedBook);\n\n      const result = await bookController.updateBook(\n        mockBook._id,\n        book as UpdateBookDto,\n      );\n\n      expect(bookService.updateById).toHaveBeenCalled();\n      expect(result).toEqual(updatedBook);\n    });\n  });\n\n  describe('deleteBook', () => {\n    it('should delete a book by ID', async () => {\n      const result = await bookController.deleteBook(mockBook._id);\n\n      expect(bookService.deleteById).toHaveBeenCalled();\n      expect(result).toEqual({ deleted: true });\n    });\n  });\n});\n"
        }
    ]
}