{
    "sourceFile": "src/book/book.service.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1707875522121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1707877711512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,27 @@\n+/* eslint-disable @typescript-eslint/no-unused-vars */\n import { getModelToken } from '@nestjs/mongoose';\n-import { TestingModule } from '@nestjs/testing';\n+import { Test, TestingModule } from '@nestjs/testing';\n import { BookService } from './book.service';\n import { Book } from './schemas/book.schema';\n+import { Model } from 'mongoose';\n \n describe('BookService', () => {\n+  let bookService: BookService;\n+  let model: Model<Book>;\n+\n+  const mockBookService = {};\n   beforeEach(async () => {\n     const module: TestingModule = await Test.createTestingModule({\n       providers: [\n         BookService,\n         {\n           provide: getModelToken(Book.name),\n-          useValue: mockBookService,\n+          useValue: BookService,\n         },\n       ],\n-    });\n+    }).compile();\n+\n+    bookService = module.get < BookService >{ BookService }\n+    model = module.get<Model>(getModelToken(Book.name));\n   });\n });\n"
                },
                {
                    "date": 1707878417410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,164 @@\n-/* eslint-disable @typescript-eslint/no-unused-vars */\n+import { BadRequestException, NotFoundException } from '@nestjs/common';\n import { getModelToken } from '@nestjs/mongoose';\n import { Test, TestingModule } from '@nestjs/testing';\n-import { Model } from 'mongoose';\n+import mongoose, { Model } from 'mongoose';\n+import { User } from '../auth/schemas/user.schema';\n import { BookService } from './book.service';\n-import { Book } from './schemas/book.schema';\n+import { CreateBookDto } from './dto/create-book.dto';\n+import { Book, Category } from './schemas/book.schema';\n \n describe('BookService', () => {\n   let bookService: BookService;\n   let model: Model<Book>;\n \n-  const mockBookService = {};\n+  const mockBook = {\n+    _id: '61c0ccf11d7bf83d153d7c06',\n+    user: '61c0ccf11d7bf83d153d7c06',\n+    title: 'New Book',\n+    description: 'Book Description',\n+    author: 'Author',\n+    price: 100,\n+    category: Category.FANTASY,\n+  };\n+\n+  const mockUser = {\n+    _id: '61c0ccf11d7bf83d153d7c06',\n+    name: 'Ghulam',\n+    email: 'ghulam1@gmail.com',\n+  };\n+\n+  const mockBookService = {\n+    find: jest.fn(),\n+    create: jest.fn(),\n+    findById: jest.fn(),\n+    findByIdAndUpdate: jest.fn(),\n+    findByIdAndDelete: jest.fn(),\n+  };\n+\n   beforeEach(async () => {\n     const module: TestingModule = await Test.createTestingModule({\n       providers: [\n         BookService,\n         {\n           provide: getModelToken(Book.name),\n-          useValue: BookService,\n+          useValue: mockBookService,\n         },\n       ],\n     }).compile();\n \n-    bookService = module.get < BookService >{ BookService }\n-    model = module.get<Model>(getModelToken(Book.name));\n+    bookService = module.get<BookService>(BookService);\n+    model = module.get<Model<Book>>(getModelToken(Book.name));\n   });\n+\n+  describe('findAll', () => {\n+    it('should return an array of books', async () => {\n+      const query = { page: '1', keyword: 'test' };\n+\n+      jest.spyOn(model, 'find').mockImplementation(\n+        () =>\n+          ({\n+            limit: () => ({\n+              skip: jest.fn().mockResolvedValue([mockBook]),\n+            }),\n+          } as any),\n+      );\n+\n+      const result = await bookService.findAll(query);\n+\n+      expect(model.find).toHaveBeenCalledWith({\n+        title: { $regex: 'test', $options: 'i' },\n+      });\n+\n+      expect(result).toEqual([mockBook]);\n+    });\n+  });\n+\n+  describe('create', () => {\n+    it('should create and return a book', async () => {\n+      const newBook = {\n+        title: 'New Book',\n+        description: 'Book Description',\n+        author: 'Author',\n+        price: 100,\n+        category: Category.FANTASY,\n+      };\n+\n+      jest\n+        .spyOn(model, 'create')\n+        .mockImplementationOnce(() => Promise.resolve(mockBook));\n+\n+      const result = await bookService.create(\n+        newBook as CreateBookDto,\n+        mockUser as User,\n+      );\n+\n+      expect(result).toEqual(mockBook);\n+    });\n+  });\n+\n+  describe('findById', () => {\n+    it('should find and return a book by ID', async () => {\n+      jest.spyOn(model, 'findById').mockResolvedValue(mockBook);\n+\n+      const result = await bookService.findById(mockBook._id);\n+\n+      expect(model.findById).toHaveBeenCalledWith(mockBook._id);\n+      expect(result).toEqual(mockBook);\n+    });\n+\n+    it('should throw BadRequestException if invalid ID is provided', async () => {\n+      const id = 'invalid-id';\n+\n+      const isValidObjectIDMock = jest\n+        .spyOn(mongoose, 'isValidObjectId')\n+        .mockReturnValue(false);\n+\n+      await expect(bookService.findById(id)).rejects.toThrow(\n+        BadRequestException,\n+      );\n+\n+      expect(isValidObjectIDMock).toHaveBeenCalledWith(id);\n+      isValidObjectIDMock.mockRestore();\n+    });\n+\n+    it('should throw NotFoundException if book is not found', async () => {\n+      jest.spyOn(model, 'findById').mockResolvedValue(null);\n+\n+      await expect(bookService.findById(mockBook._id)).rejects.toThrow(\n+        NotFoundException,\n+      );\n+\n+      expect(model.findById).toHaveBeenCalledWith(mockBook._id);\n+    });\n+  });\n+\n+  describe('updateById', () => {\n+    it('should update and return a book', async () => {\n+      const updatedBook = { ...mockBook, title: 'Updated name' };\n+      const book = { title: 'Updated name' };\n+\n+      jest.spyOn(model, 'findByIdAndUpdate').mockResolvedValue(updatedBook);\n+\n+      const result = await bookService.updateById(mockBook._id, book as any);\n+\n+      expect(model.findByIdAndUpdate).toHaveBeenCalledWith(mockBook._id, book, {\n+        new: true,\n+        runValidators: true,\n+      });\n+\n+      expect(result.title).toEqual(book.title);\n+    });\n+  });\n+\n+  describe('deleteById', () => {\n+    it('should delete and return a book', async () => {\n+      jest.spyOn(model, 'findByIdAndDelete').mockResolvedValue(mockBook);\n+\n+      const result = await bookService.deleteById(mockBook._id);\n+\n+      expect(model.findByIdAndDelete).toHaveBeenCalledWith(mockBook._id);\n+\n+      expect(result).toEqual(mockBook);\n+    });\n+  });\n });\n"
                }
            ],
            "date": 1707875522121,
            "name": "Commit-0",
            "content": "import { TestingModule } from '@nestjs/testing';\nimport { BookService } from './book.service';\nimport { getModelToken } from '@nestjs/mongoose';\nimport { Book } from './schemas/book.schema';\n\ndescribe('BookService', () => {\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        BookService,\n        {\n          provide: getModelToken(Book.name),\n          useValue: mockBookService,\n        },\n      ],\n    });\n  });\n});\n"
        }
    ]
}