{
    "sourceFile": "test/app.e2e-spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1707884219138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1707884317247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,11 +25,11 @@\n \n   afterAll(() => mongoose.disconnect());\n \n   const user = {\n-    name: 'Ghulam',\n-    email: 'ghulam@gmail.com',\n-    password: '12345678',\n+    name: 'Dapravith Rotha',\n+    email: 'dapravithrotha.com',\n+    password: '123456',\n   };\n \n   const newBook = {\n     title: 'New Book',\n"
                },
                {
                    "date": 1707884522043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,15 +16,16 @@\n     app = moduleFixture.createNestApplication();\n     await app.init();\n   });\n \n-  beforeAll(() => {\n-    mongoose.connect(process.env.DB_URI, function () {\n-      mongoose.connection.db.dropDatabase();\n-    });\n+  beforeAll(async () => {\n+    await mongoose.connect(process.env.DB_URI);\n+    await mongoose.connection.db.dropDatabase();\n   });\n \n-  afterAll(() => mongoose.disconnect());\n+  afterAll(async () => {\n+    await mongoose.disconnect();\n+  });\n \n   const user = {\n     name: 'Dapravith Rotha',\n     email: 'dapravithrotha.com',\n"
                },
                {
                    "date": 1707884673867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,16 +16,15 @@\n     app = moduleFixture.createNestApplication();\n     await app.init();\n   });\n \n-  beforeAll(async () => {\n-    await mongoose.connect(process.env.DB_URI);\n-    await mongoose.connection.db.dropDatabase();\n+  beforeAll(() => {\n+    mongoose.connect(process.env.DB_URI, function () {\n+      mongoose.connection.db.dropDatabase();\n+    });\n   });\n \n-  afterAll(async () => {\n-    await mongoose.disconnect();\n-  });\n+  afterAll(() => mongoose.disconnect());\n \n   const user = {\n     name: 'Dapravith Rotha',\n     email: 'dapravithrotha.com',\n"
                },
                {
                    "date": 1707885059756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,15 +16,17 @@\n     app = moduleFixture.createNestApplication();\n     await app.init();\n   });\n \n-  beforeAll(() => {\n-    mongoose.connect(process.env.DB_URI, function () {\n-      mongoose.connection.db.dropDatabase();\n+  beforeAll(async () => {\n+    await mongoose.connect(process.env.DB_URI);\n+      await mongoose.connection.db.dropDatabase();\n     });\n   });\n \n-  afterAll(() => mongoose.disconnect());\n+  afterAll(async () =>{\n+    mongoose.disconnect();\n+  });\n \n   const user = {\n     name: 'Dapravith Rotha',\n     email: 'dapravithrotha.com',\n"
                },
                {
                    "date": 1707885654881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,26 @@\n import { INestApplication } from '@nestjs/common';\n import { Test, TestingModule } from '@nestjs/testing';\n import mongoose from 'mongoose';\n import * as request from 'supertest';\n+import { AppModule } from '../src/app.module';\n import { Category } from '../src/book/schemas/book.schema';\n-import { AppModule } from './../src/app.module';\n \n describe('Book & Auth Controller (e2e)', () => {\n   let app: INestApplication;\n \n+  beforeAll(async () => {\n+    if (!process.env.DB_URI) {\n+      throw new Error('DB_URI environment variable is not set');\n+    }\n+    await mongoose.connect(process.env.DB_URI);\n+    await mongoose.connection.db.dropDatabase();\n+  });\n+\n+  afterAll(async () => {\n+    await mongoose.disconnect();\n+  });\n+\n   beforeEach(async () => {\n     const moduleFixture: TestingModule = await Test.createTestingModule({\n       imports: [AppModule],\n     }).compile();\n@@ -16,112 +28,96 @@\n     app = moduleFixture.createNestApplication();\n     await app.init();\n   });\n \n-  beforeAll(async () => {\n-    await mongoose.connect(process.env.DB_URI);\n-      await mongoose.connection.db.dropDatabase();\n-    });\n-  });\n-\n-  afterAll(async () =>{\n-    mongoose.disconnect();\n-  });\n-\n   const user = {\n     name: 'Dapravith Rotha',\n-    email: 'dapravithrotha.com',\n+    email: 'dapravithrotha@gmail.com', // Make sure to use a valid email format\n     password: '123456',\n   };\n \n   const newBook = {\n-    title: 'New Book',\n-    description: 'Book Description',\n-    author: 'Author',\n-    price: 100,\n-    category: Category.FANTASY,\n+    title: 'Book Version 222',\n+    description: 'Book 2 description',\n+    author: 'Author name 2',\n+    price: 200,\n+    category: Category.ADVENTURE,\n   };\n \n   let jwtToken: string = '';\n   let bookCreated;\n \n   describe('Auth', () => {\n     it('(POST) - Register a new user', async () => {\n-      return request(app.getHttpServer())\n+      const response = await request(app.getHttpServer())\n         .post('/auth/signup')\n         .send(user)\n-        .expect(201)\n-        .then((res) => {\n-          expect(res.body.token).toBeDefined();\n-        });\n+        .expect(201);\n+\n+      expect(response.body.token).toBeDefined();\n+      jwtToken = response.body.token;\n     });\n \n-    it('(GET) - Login user', async () => {\n-      return request(app.getHttpServer())\n-        .get('/auth/login')\n+    it('(POST) - Login user', async () => {\n+      const response = await request(app.getHttpServer())\n+        .post('/auth/login') // Make sure this matches your actual login endpoint\n         .send({ email: user.email, password: user.password })\n-        .expect(200)\n-        .then((res) => {\n-          expect(res.body.token).toBeDefined();\n-          jwtToken = res.body.token;\n-        });\n+        .expect(200);\n+\n+      expect(response.body.token).toBeDefined();\n+      jwtToken = response.body.token;\n     });\n   });\n \n   describe('Book', () => {\n     it('(POST) - Create new Book', async () => {\n-      return request(app.getHttpServer())\n+      const response = await request(app.getHttpServer())\n         .post('/books')\n-        .set('Authorization', 'Bearer ' + jwtToken)\n+        .set('Authorization', `Bearer ${jwtToken}`)\n         .send(newBook)\n-        .expect(201)\n-        .then((res) => {\n-          expect(res.body._id).toBeDefined();\n-          expect(res.body.title).toEqual(newBook.title);\n-          bookCreated = res.body;\n-        });\n+        .expect(201);\n+\n+      expect(response.body._id).toBeDefined();\n+      expect(response.body.title).toEqual(newBook.title);\n+      bookCreated = response.body;\n     });\n \n     it('(GET) - Get all Books', async () => {\n-      return request(app.getHttpServer())\n+      await request(app.getHttpServer())\n         .get('/books')\n         .expect(200)\n         .then((res) => {\n-          expect(res.body.length).toBe(1);\n+          expect(res.body.length).toBeGreaterThan(0);\n         });\n     });\n \n     it('(GET) - Get a Book by ID', async () => {\n-      return request(app.getHttpServer())\n-        .get(`/books/${bookCreated?._id}`)\n+      await request(app.getHttpServer())\n+        .get(`/books/${bookCreated._id}`)\n         .expect(200)\n         .then((res) => {\n           expect(res.body).toBeDefined();\n           expect(res.body._id).toEqual(bookCreated._id);\n         });\n     });\n \n     it('(PUT) - Update a Book by ID', async () => {\n-      const book = { title: 'Updated name' };\n-      return request(app.getHttpServer())\n-        .put(`/books/${bookCreated?._id}`)\n-        .set('Authorization', 'Bearer ' + jwtToken)\n-        .send(book)\n+      const updatedBookTitle = 'Updated Book Title';\n+      await request(app.getHttpServer())\n+        .put(`/books/${bookCreated._id}`)\n+        .set('Authorization', `Bearer ${jwtToken}`)\n+        .send({ title: updatedBookTitle })\n         .expect(200)\n         .then((res) => {\n           expect(res.body).toBeDefined();\n-          expect(res.body.title).toEqual(book.title);\n+          expect(res.body.title).toEqual(updatedBookTitle);\n         });\n     });\n \n     it('(DELETE) - Delete a Book by ID', async () => {\n-      return request(app.getHttpServer())\n-        .delete(`/books/${bookCreated?._id}`)\n-        .set('Authorization', 'Bearer ' + jwtToken)\n-        .expect(200)\n-        .then((res) => {\n-          expect(res.body).toBeDefined();\n-          expect(res.body.deleted).toEqual(true);\n-        });\n+      await request(app.getHttpServer())\n+        .delete(`/books/${bookCreated._id}`)\n+        .set('Authorization', `Bearer ${jwtToken}`)\n+        .expect(200);\n     });\n   });\n });\n"
                },
                {
                    "date": 1707885727795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     await app.init();\n   });\n \n   const user = {\n-    name: 'Dapravith Rotha',\n+    name: 'Rotha Dapravith',\n     email: 'dapravithrotha@gmail.com', // Make sure to use a valid email format\n     password: '123456',\n   };\n \n"
                }
            ],
            "date": 1707884219138,
            "name": "Commit-0",
            "content": "import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { AppModule } from './../src/app.module';\nimport mongoose from 'mongoose';\nimport { Category } from '../src/book/schemas/book.schema';\n\ndescribe('Book & Auth Controller (e2e)', () => {\n  let app: INestApplication;\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    await app.init();\n  });\n\n  beforeAll(() => {\n    mongoose.connect(process.env.DB_URI, function () {\n      mongoose.connection.db.dropDatabase();\n    });\n  });\n\n  afterAll(() => mongoose.disconnect());\n\n  const user = {\n    name: 'Ghulam',\n    email: 'ghulam@gmail.com',\n    password: '12345678',\n  };\n\n  const newBook = {\n    title: 'New Book',\n    description: 'Book Description',\n    author: 'Author',\n    price: 100,\n    category: Category.FANTASY,\n  };\n\n  let jwtToken: string = '';\n  let bookCreated;\n\n  describe('Auth', () => {\n    it('(POST) - Register a new user', async () => {\n      return request(app.getHttpServer())\n        .post('/auth/signup')\n        .send(user)\n        .expect(201)\n        .then((res) => {\n          expect(res.body.token).toBeDefined();\n        });\n    });\n\n    it('(GET) - Login user', async () => {\n      return request(app.getHttpServer())\n        .get('/auth/login')\n        .send({ email: user.email, password: user.password })\n        .expect(200)\n        .then((res) => {\n          expect(res.body.token).toBeDefined();\n          jwtToken = res.body.token;\n        });\n    });\n  });\n\n  describe('Book', () => {\n    it('(POST) - Create new Book', async () => {\n      return request(app.getHttpServer())\n        .post('/books')\n        .set('Authorization', 'Bearer ' + jwtToken)\n        .send(newBook)\n        .expect(201)\n        .then((res) => {\n          expect(res.body._id).toBeDefined();\n          expect(res.body.title).toEqual(newBook.title);\n          bookCreated = res.body;\n        });\n    });\n\n    it('(GET) - Get all Books', async () => {\n      return request(app.getHttpServer())\n        .get('/books')\n        .expect(200)\n        .then((res) => {\n          expect(res.body.length).toBe(1);\n        });\n    });\n\n    it('(GET) - Get a Book by ID', async () => {\n      return request(app.getHttpServer())\n        .get(`/books/${bookCreated?._id}`)\n        .expect(200)\n        .then((res) => {\n          expect(res.body).toBeDefined();\n          expect(res.body._id).toEqual(bookCreated._id);\n        });\n    });\n\n    it('(PUT) - Update a Book by ID', async () => {\n      const book = { title: 'Updated name' };\n      return request(app.getHttpServer())\n        .put(`/books/${bookCreated?._id}`)\n        .set('Authorization', 'Bearer ' + jwtToken)\n        .send(book)\n        .expect(200)\n        .then((res) => {\n          expect(res.body).toBeDefined();\n          expect(res.body.title).toEqual(book.title);\n        });\n    });\n\n    it('(DELETE) - Delete a Book by ID', async () => {\n      return request(app.getHttpServer())\n        .delete(`/books/${bookCreated?._id}`)\n        .set('Authorization', 'Bearer ' + jwtToken)\n        .expect(200)\n        .then((res) => {\n          expect(res.body).toBeDefined();\n          expect(res.body.deleted).toEqual(true);\n        });\n    });\n  });\n});\n"
        }
    ]
}